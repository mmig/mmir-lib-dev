{"version":3,"sources":["webpack://scionCoreLib/webpack/universalModuleDefinition","webpack://scionCoreLib/./index.js","webpack://scionCoreLib/./node_modules/@scion-scxml/core-base/lib/ArraySet.js","webpack://scionCoreLib/./node_modules/@scion-scxml/core-base/lib/constants.js","webpack://scionCoreLib/./node_modules/@scion-scxml/core-base/lib/helpers.js","webpack://scionCoreLib/./node_modules/@scion-scxml/core-base/lib/query.js","webpack://scionCoreLib/./node_modules/@scion-scxml/core-base/lib/scion-core-base.js","webpack://scionCoreLib/./node_modules/@scion-scxml/core/lib/Statechart.js","webpack://scionCoreLib/./node_modules/tiny-events/lib/index.js","webpack://scionCoreLib/./util-inspect-stub.js","webpack://scionCoreLib/webpack/bootstrap","webpack://scionCoreLib/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","ArraySet","l","this","o","Set","prototype","add","x","remove","union","v","difference","contains","has","iter","Array","from","isEmpty","size","equals","s2","toString","join","STATE_TYPES","BASIC","COMPOSITE","PARALLEL","HISTORY","INITIAL","FINAL","SCXML_IOPROCESSOR_TYPE","HTTP_IOPROCESSOR_TYPE","RX_TRAILING_WILDCARD","constants","require","isEventPrefixMatch","prefix","fullName","replace","length","charAt","indexOf","isTransitionMatch","t","eventName","events","some","tEvent","getStateWithHigherSourceChildPriority","s1","depth","documentOrder","extend","to","Object","keys","forEach","k","transitionWithTargets","targets","transitionComparator","t1","t2","initializeModel","rootState","opts","transitions","idToStateMap","Map","idCount","statesWithInitialAttributes","checkInitialRef","state","initialRef","Error","id","RX_WHITESPACE","getScope","transition","transitionIsReallyInternal","type","source","typeEnum","parent","every","target","descendants","lcca","getLCCA","commonAncestors","j","len","ancestors","anc","legacySemantics","push","populateStateIdMap","set","states","fakeRootState","$deserializeDatamodel","$serializeDatamodel","$idToStateMap","docUrl","name","$type","traverse","apply","ancs","concat","isAtomic","initialChildren","map","s","reduce","a","b","isArray","initial","filter","child","historyChildren","historyRef","undefined","generateId","prop","handler","invokes","invoke","finalize","i","onTransition","event","trim","split","get","scope","connectTransitionGraph","initialStates","initialState","connectIntialAttributes","scxmlPrefixTransitionSelector","evaluator","selectEventlessTransitions","cond","eventlessTransitionSelector","getTransitionWithHigherSourceChildPriority","_args","sortInEntryOrder","initializeModelGeneratorFn","modelFn","interpreter","call","_x","_sessionid","_ioprocessors","isIn","bind","deserializeSerializedConfiguration","serializedConfiguration","deserializeHistory","serializedHistory","sid","query","isDescendant","getAncestors","index","slice","isOrthogonalTo","isAncestrallyRelatedTo","getLCA","getAncestorsOrSelf","getDescendantsOrSelf","EventEmitter","util","helpers","printTrace","process","env","DEBUG","BaseInterpreter","modelOrModelFactory","InterpreterScriptingContext","_isStepping","_scriptingContext","interpreterScriptingContext","generateSessionid","sessionid","sessionRegistry","invokerExecutionContext","_executionContext","model","location","scxml","JSON","parse","stringify","_model","console","log","priorityComparisonFn","transitionSelector","String","arguments","_externalEventQueue","_internalEventQueue","params","snapshot","_configuration","_historyValue","_isInFinalState","EVENTS","on","_log","emit","parentSession","invokeid","_exitInterpreter","_cancelAllDelayedSends","statesToExit","_getFullConfiguration","sort","stateExited","onExit","exitIdx","exitLen","block","blockIdx","blockLen","actionRef","e","_handleError","cancelInvoke","send","data","donedata","_initStart","_performBigStep","getConfiguration","cb","genAsync","nop","stateName","getFullConfiguration","currentEvent","keepGoing","allStatesExited","allStatesEntered","_startBigStep","_selectTransitionsAndPerformSmallStep","_finishBigStep","selectedTransitions","_selectTransitions","ev","shift","statesExited","statesEntered","_performSmallStep","autoforward","action","_evaluateAction","f","_timeouts","timeoutOptions","sendOptions","delay","clearTimeout","timeoutHandle","_timeoutMap","key","nextStep","setImmediate","selectedTransitionsWithTargets","_exitStates","_executeTransitions","_enterStates","_getStatesExited","isDeep","s0","basicStatesExited","transitionList","txIdx","txLen","desc","configList","cfgIdx","cfgLen","ancIdx","ancLen","sortedTransitions","stxIdx","targetIds","statesForDefaultEntry","defaultHistoryContent","_computeEntrySet","enterIdx","enterLen","stateEntered","onEntry","entryIdx","entryLen","grandparent","isInFinalState","_getEffectiveTargetStates","statesToEnter","_addDescendantStatesToEnter","ancestor","_addAncestorStatesToEnter","targetState","__proto__","match","tagname","line","column","reason","message","args","arg","inspect","listener","off","getEvents","stateIdx","stateLen","_serializeHistory","evtObjOrName","optionalData","c","_performBigStepAsync","err","config","sessionIdCounter","_interpreter","_invokeMap","validateUriRegex","invokeSendTargetRegex","scxmlSendTargetRegex","_installDefaultPropsOnEvent","xmlString","xmlParser","invokeObj","Promise","resolve","reject","invokers","session","sessionPromise","then","cancel","isInternal","origin","origintype","options","sendFn","sendType","customSend","setTimeout","raise","sendid","doSend","targetSessionId","invokeId","sendAsync","sendAction","test","customCancel","base","Statechart","enabledTransitions","loop","priorityEnabledTransitions","_removeConflictingTransition","filteredTransitions","t1Preempted","transitionsToRemove","t1ExitSet","_computeExitSet","t2ExitSet","hasIntersection","t3","invokingSession","constructorFunction","fnModel","start","_listeners","once","__once","splice","obj","_opts","visited","WeakSet","_key","value","_err","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":"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","file":"scion-core-lib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"scionCoreLib\"] = factory();\n\telse\n\t\troot[\"scionCoreLib\"] = factory();\n})(self, function() {\nreturn ","\nmodule.exports = require('@scion-scxml/core');\n","/* begin ArraySet */\n\n/** @constructor */\nfunction ArraySet(l) {\n    l = l || [];\n    this.o = new Set(l);        \n}\n\nArraySet.prototype = {\n\n    add : function(x) {\n        this.o.add(x);\n    },\n\n    remove : function(x) {\n        return this.o.delete(x);\n    },\n\n    union : function(l) {\n        for (var v of l.o) {\n            this.o.add(v);\n        }\n        return this;\n    },\n\n    difference : function(l) {\n        for (var v of l.o) {\n            this.o.delete(v);\n        }\n        return this;\n    },\n\n    contains : function(x) {\n        return this.o.has(x);\n    },\n\n    iter : function() {\n        return Array.from(this.o);\n    },\n\n    isEmpty : function() {\n        return !this.o.size;\n    },\n\n    size: function() {\n        return this.o.size;\n    },\n\n    equals : function(s2) {\n        if (this.o.size !== s2.size()) {\n            return false;\n        }\n\n        for (var v of this.o) {\n            if (!s2.contains(v)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    toString : function() {\n        return this.o.size === 0 ? '<empty>' : Array.from(this.o).join(',\\n');\n    }\n};\n\nmodule.exports = ArraySet;\n","var STATE_TYPES = {\n    BASIC: 0,\n    COMPOSITE: 1,\n    PARALLEL: 2,\n    HISTORY: 3,\n    INITIAL: 4,\n    FINAL: 5\n};\n\nconst SCXML_IOPROCESSOR_TYPE = 'http://www.w3.org/TR/scxml/#SCXMLEventProcessor'\nconst HTTP_IOPROCESSOR_TYPE = 'http://www.w3.org/TR/scxml/#BasicHTTPEventProcessor'\nconst RX_TRAILING_WILDCARD = /\\.\\*$/;\n\nmodule.exports = {\n  STATE_TYPES : STATE_TYPES,\n  SCXML_IOPROCESSOR_TYPE  : SCXML_IOPROCESSOR_TYPE,\n  HTTP_IOPROCESSOR_TYPE  : HTTP_IOPROCESSOR_TYPE, \n  RX_TRAILING_WILDCARD  : RX_TRAILING_WILDCARD \n};\n","const constants = require('./constants'),\n      STATE_TYPES = constants.STATE_TYPES,\n      RX_TRAILING_WILDCARD = constants.RX_TRAILING_WILDCARD;\n\nconst printTrace = false;\n\nmodule.exports = {\n  extend : extend,\n  transitionWithTargets : transitionWithTargets,\n  transitionComparator : transitionComparator,\n  initializeModel : initializeModel,\n  isEventPrefixMatch : isEventPrefixMatch,\n  isTransitionMatch : isTransitionMatch,\n  scxmlPrefixTransitionSelector : scxmlPrefixTransitionSelector,\n  eventlessTransitionSelector : eventlessTransitionSelector,\n  getTransitionWithHigherSourceChildPriority : getTransitionWithHigherSourceChildPriority,\n  sortInEntryOrder : sortInEntryOrder,\n  getStateWithHigherSourceChildPriority : getStateWithHigherSourceChildPriority,\n  initializeModelGeneratorFn : initializeModelGeneratorFn,\n  deserializeSerializedConfiguration : deserializeSerializedConfiguration,\n  deserializeHistory : deserializeHistory\n};\n\nfunction extend (to, from){\n  Object.keys(from).forEach(function(k){\n    to[k] = from[k]; \n  });\n  return to;\n};\n\nfunction transitionWithTargets(t){\n    return t.targets;\n}\n\nfunction transitionComparator(t1, t2) {\n    return t1.documentOrder - t2.documentOrder;\n}\n\nfunction initializeModel(rootState, opts){\n    var transitions = [], idToStateMap = new Map(), documentOrder = 0;\n\n\n    //TODO: need to add fake ids to anyone that doesn't have them\n    //FIXME: make this safer - break into multiple passes\n    var idCount = {};\n\n    function generateId(type){\n        if(idCount[type] === undefined) idCount[type] = 0;\n\n        do {\n          var count = idCount[type]++;\n          var id = '$generated-' + type + '-' + count; \n        } while (idToStateMap.has(id))\n        \n        return id;\n    }\n\n    function wrapInFakeRootState(state){\n        return {\n            $deserializeDatamodel : state.$deserializeDatamodel || function(){},\n            $serializeDatamodel : state.$serializeDatamodel || function(){ return null;},\n            $idToStateMap : idToStateMap,   //keep this for handy deserialization of serialized configuration\n            docUrl : state.docUrl,\n            name : state.name,\n            states : [\n                {\n                    $type : 'initial',\n                    transitions : [{\n                        target : state\n                    }]\n                },\n                state\n            ]\n        };\n    }\n\n    var statesWithInitialAttributes = [];\n\n    /**\n      @this {SCTransition}\n    */\n    function transitionToString(sourceState){\n      return `${sourceState} -- ${this.events ? '(' + this.events.join(',') + ')' : null}${this.cond ? '[' + this.cond.name + ']' : ''} --> ${this.targets ? this.targets.join(',') : null}`;\n    }\n\n    /**\n      @this {SCState}\n    */\n    function stateToString(){\n      return this.id;\n    }\n\n    function populateStateIdMap(state){\n      //populate state id map\n      if(state.id){\n          idToStateMap.set(state.id, state);\n      }\n\n      if(state.states) {\n          for (var j = 0, len = state.states.length; j < len; j++) {\n              populateStateIdMap(state.states[j]);\n          }\n      }\n    }\n\n    function traverse(ancestors,state){\n\n        if(printTrace) state.toString = stateToString;\n\n        //add to global transition and state id caches\n        if(state.transitions) transitions.push.apply(transitions,state.transitions);\n\n        //create a default type, just to normalize things\n        //this way we can check for unsupported types below\n        state.$type = state.$type || 'state';\n\n        //add ancestors and depth properties\n        state.ancestors = ancestors;\n        state.depth = ancestors.length;\n        state.parent = ancestors[0];\n        state.documentOrder = documentOrder++; \n\n        //add some information to transitions\n        state.transitions = state.transitions || [];\n        for (var j = 0, len = state.transitions.length; j < len; j++) {\n            var transition = state.transitions[j];\n            transition.documentOrder = documentOrder++; \n            transition.source = state;\n            if(printTrace) transition.toString = transitionToString.bind(transition, state);\n        };\n\n        //recursive step\n        if(state.states) {\n            var ancs = [state].concat(ancestors);\n            for (var j = 0, len = state.states.length; j < len; j++) {\n                traverse(ancs, state.states[j]);\n            }\n        }\n\n        //setup fast state type\n        switch(state.$type){\n            case 'parallel':\n                state.typeEnum = STATE_TYPES.PARALLEL;\n                state.isAtomic = false;\n                break;\n            case 'initial' : \n                state.typeEnum = STATE_TYPES.INITIAL;\n                state.isAtomic = true;\n                break;\n            case 'history' :\n                state.typeEnum = STATE_TYPES.HISTORY;\n                state.isAtomic = true;\n                break;\n            case 'final' : \n                state.typeEnum = STATE_TYPES.FINAL;\n                state.isAtomic = true;\n                break;\n            case 'state' : \n            case 'scxml' :\n                if(state.states && state.states.length){\n                    state.typeEnum = STATE_TYPES.COMPOSITE;\n                    state.isAtomic = false;\n                }else{\n                    state.typeEnum = STATE_TYPES.BASIC;\n                    state.isAtomic = true;\n                }\n                break;\n            default :\n                throw new Error('Unknown state type: ' + state.$type);\n        }\n\n        //descendants property on states will now be populated. add descendants to this state\n        if(state.states){\n            state.descendants = state.states.concat(state.states.map(function(s){return s.descendants;}).reduce(function(a,b){return a.concat(b);},[]));\n        }else{\n            state.descendants = [];\n        }\n\n        var initialChildren;\n        if(state.typeEnum === STATE_TYPES.COMPOSITE){\n            //set up initial state\n            \n            if(Array.isArray(state.initial) || typeof state.initial === 'string'){\n                statesWithInitialAttributes.push(state);\n            }else{\n                //take the first child that has initial type, or first child\n                initialChildren = state.states.filter(function(child){\n                    return child.$type === 'initial';\n                });\n\n                state.initialRef = [initialChildren.length ? initialChildren[0] : state.states[0]];\n                checkInitialRef(state);\n            }\n\n        }\n\n        //hook up history\n        if(state.typeEnum === STATE_TYPES.COMPOSITE ||\n                state.typeEnum === STATE_TYPES.PARALLEL){\n\n            var historyChildren = state.states.filter(function(s){\n                return s.$type === 'history';\n            }); \n\n           state.historyRef = historyChildren;\n        }\n\n        //now it's safe to fill in fake state ids\n        if(!state.id){\n            state.id = generateId(state.$type);\n            idToStateMap.set(state.id, state);\n        }\n\n        //normalize onEntry/onExit, which can be single fn or array, or array of arrays (blocks)\n        ['onEntry','onExit'].forEach(function(prop){\n          if (state[prop]) {\n            if(!Array.isArray(state[prop])){\n              state[prop] = [state[prop]];\n            }\n            if(!state[prop].every(function(handler){ return Array.isArray(handler); })){\n              state[prop] = [state[prop]];\n            }\n          }\n        });\n\n        if (state.invokes && !Array.isArray(state.invokes)) {\n            state.invokes = [state.invokes];\n            state.invokes.forEach( invoke => {\n              if (invoke.finalize && !Array.isArray(invoke.finalize)) {\n                invoke.finalize = [invoke.finalize];\n              }\n            })\n        }\n    }\n\n    //TODO: convert events to regular expressions in advance\n\n    function checkInitialRef(state){\n      if(!state.initialRef) throw new Error('Unable to locate initial state for composite state: ' + state.id);\n    }\n    function connectIntialAttributes(){\n      for (var j = 0, len = statesWithInitialAttributes.length; j < len; j++) {\n        var s = statesWithInitialAttributes[j];\n\n        var initialStates = Array.isArray(s.initial) ? s.initial : [s.initial];\n        s.initialRef = initialStates.map(function(initialState){ return idToStateMap.get(initialState); });\n        checkInitialRef(s);\n      }\n    }\n\n    var RX_WHITESPACE = /\\s+/;\n\n    function connectTransitionGraph(){\n        //normalize as with onEntry/onExit\n        for (var i = 0, len = transitions.length; i < len; i++) {\n            var t = transitions[i];\n            if (t.onTransition && !Array.isArray(t.onTransition)) {\n                t.onTransition = [t.onTransition];\n            }\n\n            //normalize \"event\" attribute into \"events\" attribute\n            if (typeof t.event === 'string') {\n                t.events = t.event.trim().split(RX_WHITESPACE);\n            }\n            delete t.event;\n\n            if(t.targets || (typeof t.target === 'undefined')) {\n                //targets have already been set up\n                continue;\n            }   \n\n            if(typeof t.target === 'string'){\n                var target = idToStateMap.get(t.target);\n                if(!target) throw new Error('Unable to find target state with id ' + t.target);\n                t.target = target;\n                t.targets = [t.target];\n            }else if(Array.isArray(t.target)){\n                t.targets = t.target.map(function(target){\n                    if(typeof target === 'string'){\n                        target = idToStateMap.get(target);\n                        if(!target) throw new Error('Unable to find target state with id ' + t.target);\n                        return target;\n                    }else{\n                        return target;\n                    } \n                }); \n            }else if(typeof t.target === 'object'){\n                t.targets = [t.target];\n            }else{\n                throw new Error('Transition target has unknown type: ' + t.target);\n            }\n        }\n\n        //hook up LCA - optimization\n        for (var i = 0, len = transitions.length; i < len; i++) {\n            var t = transitions[i];\n            if(t.targets) t.lcca = getLCCA(t.source,t.targets[0]);    //FIXME: we technically do not need to hang onto the lcca. only the scope is used by the algorithm\n\n            t.scope = getScope(t);\n        }\n    }\n\n    function getScope(transition){\n        //Transition scope is normally the least common compound ancestor (lcca).\n        //Internal transitions have a scope equal to the source state.\n        var transitionIsReallyInternal = \n                transition.type === 'internal' &&\n                  transition.source.typeEnum === STATE_TYPES.COMPOSITE &&   //is transition source a composite state\n                  transition.source.parent &&    //root state won't have parent\n                  transition.targets && //does it target its descendants\n                  transition.targets.every(\n                      function(target){ return transition.source.descendants.indexOf(target) > -1;});\n\n        if(!transition.targets){\n            return null;\n        }else if(transitionIsReallyInternal){\n            return transition.source; \n        }else{\n            return transition.lcca;\n        }\n    }\n\n    function getLCCA(s1, s2) {\n        var commonAncestors = [];\n        for (var j = 0, len = s1.ancestors.length; j < len; j++) {\n            var anc = s1.ancestors[j];\n            if(\n                (\n                  opts && opts.legacySemantics ? \n                    anc.typeEnum === STATE_TYPES.COMPOSITE :\n                    (anc.typeEnum === STATE_TYPES.COMPOSITE || anc.typeEnum === STATE_TYPES.PARALLEL) \n                ) &&\n                anc.descendants.indexOf(s2) > -1){\n\n                commonAncestors.push(anc);\n            }\n        };\n        if(!commonAncestors.length) throw new Error(\"Could not find LCA for states.\");\n        return commonAncestors[0];\n    }\n\n    //main execution starts here\n    //FIXME: only wrap in root state if it's not a compound state\n    populateStateIdMap(rootState);\n    var fakeRootState = wrapInFakeRootState(rootState);  //I wish we had pointer semantics and could make this a C-style \"out argument\". Instead we return him\n    traverse([],fakeRootState);\n    connectTransitionGraph();\n    connectIntialAttributes();\n\n    return fakeRootState;\n}\n\n\nfunction isEventPrefixMatch(prefix, fullName) {\n    prefix = prefix.replace(RX_TRAILING_WILDCARD, '');\n\n    if (prefix === fullName) {\n        return true;\n    }\n\n    if (prefix.length > fullName.length) {\n        return false;\n    }\n\n    if (fullName.charAt(prefix.length) !== '.') {\n        return false;\n    }\n\n    return (fullName.indexOf(prefix) === 0);\n}\n\nfunction isTransitionMatch(t, eventName) {\n    return t.events.some((tEvent) => {\n        return tEvent === '*' || isEventPrefixMatch(tEvent, eventName);\n    });\n}\n\nfunction scxmlPrefixTransitionSelector(t, event, evaluator, selectEventlessTransitions) {\n    return ( \n      selectEventlessTransitions ? \n        !t.events :\n        (t.events && event && event.name && isTransitionMatch(t, event.name))\n      )\n      && (!t.cond || evaluator(t.cond));\n}\n\nfunction eventlessTransitionSelector(state){\n  return state.transitions.filter(function(transition){ return !transition.events || ( transition.events && transition.events.length === 0 ); });\n}\n\n//priority comparison functions\nfunction getTransitionWithHigherSourceChildPriority(_args) {\n    let t1 = _args[0], t2 = _args[1];\n    var r = getStateWithHigherSourceChildPriority(t1.source, t2.source);\n    //compare transitions based first on depth, then based on document order\n    if (t1.source.depth < t2.source.depth) {\n        return t2;\n    } else if (t2.source.depth < t1.source.depth) {\n        return t1;\n    } else {\n       if (t1.documentOrder < t2.documentOrder) {\n            return t1;\n        } else {\n            return t2;\n        }\n    }\n}\n\nfunction sortInEntryOrder(s1, s2){\n  return getStateWithHigherSourceChildPriority(s1, s2) * -1\n}\n\nfunction getStateWithHigherSourceChildPriority(s1, s2) {\n    //compare states based first on depth, then based on document order\n    if (s1.depth > s2.depth) {\n        return -1;\n    } else if (s1.depth < s2.depth) {\n        return 1;\n    } else {\n        //Equality\n        if (s1.documentOrder < s2.documentOrder) {\n            return 1;\n        } else if (s1.documentOrder > s2.documentOrder) {\n            return -1;\n        } else{\n            return 0;\n        }\n    }\n}\n\nfunction initializeModelGeneratorFn(modelFn, opts, interpreter){\n    return modelFn.call(interpreter,\n        opts._x,\n        opts._x._sessionid,\n        opts._x._ioprocessors,\n        interpreter.isIn.bind(interpreter));\n}\n\nfunction deserializeSerializedConfiguration(serializedConfiguration,idToStateMap){\n  return serializedConfiguration.map(function(id){\n    var state = idToStateMap.get(id);\n    if(!state) throw new Error('Error loading serialized configuration. Unable to locate state with id ' + id);\n    return state;\n  });\n}\n\nfunction deserializeHistory(serializedHistory,idToStateMap){\n  var o = {};\n  Object.keys(serializedHistory).forEach(function(sid){\n    o[sid] = serializedHistory[sid].map(function(id){\n      var state = idToStateMap.get(id);\n      if(!state) throw new Error('Error loading serialized history. Unable to locate state with id ' + id);\n      return state;\n    });\n  });\n  return o;\n}\n\n","const constants = require('./constants');\n\n//model accessor functions\nconst query = {\n    isDescendant : function(s1, s2){\n      //Returns 'true' if state1 is a descendant of state2 (a child, or a child of a child, or a child of a child of a child, etc.) Otherwise returns 'false'.\n      return s2.descendants.indexOf(s1) > -1;\n    },\n    getAncestors: function(s, root) {\n        var ancestors, index, state;\n        index = s.ancestors.indexOf(root);\n        if (index > -1) {\n            return s.ancestors.slice(0, index);\n        } else {\n            return s.ancestors;\n        }\n    },\n    isOrthogonalTo: function(s1, s2) {\n        //Two control states are orthogonal if they are not ancestrally\n        //related, and their smallest, mutual parent is a Concurrent-state.\n        return !this.isAncestrallyRelatedTo(s1, s2) && this.getLCA(s1, s2).typeEnum === constants.STATE_TYPES.PARALLEL;\n    },\n    isAncestrallyRelatedTo: function(s1, s2) {\n        //Two control states are ancestrally related if one is child/grandchild of another.\n        return this.getAncestorsOrSelf(s2).indexOf(s1) > -1 || this.getAncestorsOrSelf(s1).indexOf(s2) > -1;\n    },\n    getAncestorsOrSelf: function(s, root) {\n        return [s].concat(query.getAncestors(s, root));\n    },\n    getDescendantsOrSelf: function(s) {\n        return [s].concat(s.descendants);\n    },\n    getLCA: function(s1, s2) {\n        var commonAncestors = this.getAncestors(s1).filter(function(a){\n            return a.descendants.indexOf(s2) > -1;\n        },this);\n        return commonAncestors[0];\n    }\n};\n\nmodule.exports = query;\n","//   Copyright 2012-2012 Jacob Beard, INFICON, and other SCION contributors\n//\n//   Licensed under the Apache License, Version 2.0 (the \"License\");\n//   you may not use this file except in compliance with the License.\n//   You may obtain a copy of the License at\n//\n//       http://www.apache.org/licenses/LICENSE-2.0\n//\n//   Unless required by applicable law or agreed to in writing, software\n//   distributed under the License is distributed on an \"AS IS\" BASIS,\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//   See the License for the specific language governing permissions and\n//   limitations under the License.\n\n/**\n * SCION-CORE global object\n * @namespace scion\n */\n\n/**\n * An Array of strings representing the ids all of the basic states the\n * interpreter is in after a big-step completes.\n * @typedef {Array<string>} Configuration\n */\n\n/**\n * A set of basic and composite state ids.\n * @typedef {Array<string>} FullConfiguration\n */\n\n/**\n * A set of basic and composite state ids.\n * @typedef {Array<string>} FullConfiguration\n */\n\n\"use strict\";\n\nconst EventEmitter = require('tiny-events').EventEmitter,\n  util = require('util'),\n  ArraySet = require('./ArraySet'),\n  constants = require('./constants'),\n  helpers = require('./helpers'),\n  query = require('./query'),\n  extend = helpers.extend,\n  transitionWithTargets = helpers.transitionWithTargets,\n  transitionComparator = helpers.transitionComparator,\n  initializeModel = helpers.initializeModel,\n  isEventPrefixMatch = helpers.isEventPrefixMatch,\n  isTransitionMatch = helpers.isTransitionMatch,\n  scxmlPrefixTransitionSelector = helpers.scxmlPrefixTransitionSelector,\n  eventlessTransitionSelector = helpers.eventlessTransitionSelector,\n  getTransitionWithHigherSourceChildPriority = helpers.getTransitionWithHigherSourceChildPriority,\n  sortInEntryOrder = helpers.sortInEntryOrder,\n  getStateWithHigherSourceChildPriority = helpers.getStateWithHigherSourceChildPriority,\n  initializeModelGeneratorFn = helpers.initializeModelGeneratorFn,\n  deserializeSerializedConfiguration = helpers.deserializeSerializedConfiguration,\n  deserializeHistory = helpers.deserializeHistory,\n  BASIC = constants.STATE_TYPES.BASIC,\n  COMPOSITE = constants.STATE_TYPES.COMPOSITE,\n  PARALLEL = constants.STATE_TYPES.PARALLEL,\n  HISTORY = constants.STATE_TYPES.HISTORY,\n  INITIAL = constants.STATE_TYPES.INITIAL,\n  FINAL = constants.STATE_TYPES.FINAL,\n  SCXML_IOPROCESSOR_TYPE  = constants.SCXML_IOPROCESSOR_TYPE;\n\nconst printTrace = typeof process !== 'undefined' && !!process.env.DEBUG;\n\n\n/**\n * @interface EventEmitter\n */\n\n/**\n* @event scion.BaseInterpreter#onError\n* @property {string} tagname The name of the element that produced the error. \n* @property {number} line The line in the source file in which the error occurred.\n* @property {number} column The column in the source file in which the error occurred.\n* @property {string} reason An informative error message. The text is platform-specific and subject to change.\n*/\n\n\n/**\n * @function\n * @name EventEmitter.prototype#on\n * @param {string} type\n * @param {callback} listener\n */\n\n/**\n * @function\n * @name EventEmitter.prototype#once\n * @param {string} type\n * @param {callback} listener\n */\n\n/**\n * @function\n * @name EventEmitter.prototype#off\n * @param {string} type\n * @param {callback} listener\n */\n\n/**\n * @function\n * @name EventEmitter.prototype#emit\n * @param {string} type\n * @param {any} args\n */\n/** \n * @description The SCXML constructor creates an interpreter instance from a model object.\n * @abstract\n * @class BaseInterpreter\n * @memberof scion\n * @extends EventEmitter\n * @param {SCJSON | scxml.ModelFactory} modelOrModelFactory Either an SCJSON root state; or an scxml.ModelFactory, which is a function which returns an SCJSON object. \n * @param opts\n * @param {string} [opts.sessionid] Used to populate SCXML _sessionid.\n * @param {function} [opts.generateSessionid] Factory used to generate sessionid if sessionid keyword is not specified\n * @param {Map<string, BaseInterpreter>} [opts.sessionRegistry] Map used to map sessionid strings to Statechart instances.\n * @param [opts.Set] Class to use as an ArraySet. Defaults to ES6 Set.\n * @param {object} [opts.params]  Used to pass params from invoke. Sets the datamodel when interpreter is instantiated.\n * @param {Snapshot} [opts.snapshot] State machine snapshot. Used to restore a serialized state machine.\n * @param {Statechart} [opts.parentSession]  Used to pass parent session during invoke.\n * @param {string }[opts.invokeid]  Support for id of invoke element at runtime.\n * @param {boolean} [opts.legacySemantics]\n * @param [opts.console]\n * @param [opts.transitionSelector]\n * @param [opts.customCancel]\n * @param [opts.customSend]\n * @param [opts.sendAsync]\n * @param [opts.doSend]\n * @param [opts.invokers]\n * @param [opts.xmlParser]\n * @param [opts.interpreterScriptingContext]\n * @param [opts.invokerExecutionContext]\n */\nclass BaseInterpreter extends EventEmitter {\n\n  constructor(modelOrModelFactory, opts){\n\n    super();\n\n    this.opts = opts;\n\n    this.opts.InterpreterScriptingContext = this.opts.InterpreterScriptingContext || InterpreterScriptingContext;\n\n    this._isStepping = false;\n\n    this._scriptingContext = this.opts.interpreterScriptingContext || (this.opts.InterpreterScriptingContext ? new this.opts.InterpreterScriptingContext(this) : {}); \n\n    this.opts.generateSessionid = this.opts.generateSessionid || BaseInterpreter.generateSessionid;\n    this.opts.sessionid = this.opts.sessionid || this.opts.generateSessionid();\n    this.opts.sessionRegistry = this.opts.sessionRegistry || BaseInterpreter.sessionRegistry;  //TODO: define a better interface. For now, assume a Map<sessionid, session>\n    this.opts.invokerExecutionContext = opts.invokerExecutionContext ||  modelOrModelFactory._executionContext;\n\n\n    let _ioprocessors = {};\n    _ioprocessors[SCXML_IOPROCESSOR_TYPE] = {\n      location : `#_scxml_${this.opts.sessionid}`\n    }\n    _ioprocessors.scxml = _ioprocessors[SCXML_IOPROCESSOR_TYPE];    //alias\n\n    //SCXML system variables:\n    this.opts._x = {\n        _sessionid : this.opts.sessionid,\n        _ioprocessors : _ioprocessors\n    };\n\n\n    var model;\n    if(typeof modelOrModelFactory === 'function'){\n        model = initializeModelGeneratorFn(modelOrModelFactory, this.opts, this);\n    }else if(typeof modelOrModelFactory === 'object'){\n        model = JSON.parse(JSON.stringify(modelOrModelFactory)); //assume object\n    }else{\n        throw new Error('Unexpected model type. Expected model factory function, or scjson object.');\n    }\n\n    this._model = initializeModel(model, this.opts);\n\n    this.opts.console = this.opts.console || (typeof console === 'undefined' ? {log : function(){}} : console);   //rely on global console if this console is undefined\n    this.opts.Set = this.opts.Set || ArraySet;\n    this.opts.priorityComparisonFn = this.opts.priorityComparisonFn || getTransitionWithHigherSourceChildPriority;\n    this.opts.transitionSelector = this.opts.transitionSelector || scxmlPrefixTransitionSelector;\n\n    this.opts.sessionRegistry.set(String(this.opts.sessionid), this);\n\n    this._scriptingContext.log = this._scriptingContext.log || (function log(){ \n      if(this.opts.console.log.apply){\n        this.opts.console.log.apply(this.opts.console, arguments); \n      } else {\n        //console.log on older IE does not support Function.apply, so just pass him the first argument. Best we can do for now.\n        this.opts.console.log(Array.prototype.slice.apply(arguments).join(',')); \n      }\n    }.bind(this));   //set up default scripting context log function\n\n    this._externalEventQueue = [];\n    this._internalEventQueue = [];\n\n    if(this.opts.params){\n      this._model.$deserializeDatamodel(this.opts.params);   //load up the datamodel\n    }\n\n    //check if we're loading from a previous snapshot\n    if(this.opts.snapshot){\n      this._configuration = new this.opts.Set(deserializeSerializedConfiguration(this.opts.snapshot[0], this._model.$idToStateMap));\n      this._historyValue = deserializeHistory(this.opts.snapshot[1], this._model.$idToStateMap); \n      this._isInFinalState = this.opts.snapshot[2];\n      this._model.$deserializeDatamodel(this.opts.snapshot[3]);   //load up the datamodel\n      this._internalEventQueue = this.opts.snapshot[4];\n    }else{\n      this._configuration = new this.opts.Set();\n      this._historyValue = {};\n      this._isInFinalState = false;\n    }\n\n    //add debug logging\n    BaseInterpreter.EVENTS.forEach(function(event){\n      this.on(event, this._log.bind(this,event));\n    }, this);\n\n    module.exports.emit('new',this);\n  }\n\n  /** \n  * Cancels the session. This clears all timers; puts the interpreter in a\n  * final state; and runs all exit actions on current states.\n  * @memberof BaseInterpreter.prototype\n  */\n  cancel(){\n    delete this.opts.parentSession;\n    if(this._isInFinalState) return;\n    this._isInFinalState = true;\n    this._log(`session cancelled ${this.opts.invokeid}`);\n    this._exitInterpreter(null);\n  }\n\n  _exitInterpreter(event){\n    //TODO: cancel invoked sessions\n    //cancel all delayed sends when we enter into a final state.\n    this._cancelAllDelayedSends();\n\n    let statesToExit = this._getFullConfiguration().sort(getStateWithHigherSourceChildPriority);\n\n    for (var j = 0, len = statesToExit.length; j < len; j++) {\n        var stateExited = statesToExit[j];\n\n        if(stateExited.onExit !== undefined) {\n            for (var exitIdx = 0, exitLen = stateExited.onExit.length; exitIdx < exitLen; exitIdx++) {\n                let block = stateExited.onExit[exitIdx];\n                for (let blockIdx = 0, blockLen = block.length; blockIdx < blockLen; blockIdx++) {\n                    let actionRef = block[blockIdx];\n                    try {\n                      actionRef.call(this._scriptingContext, null);\n                    } catch (e){\n                      this._handleError(e, actionRef);\n                      break;\n                    }\n                }\n            }\n        }\n\n        //cancel invoked session\n        if(stateExited.invokes) stateExited.invokes.forEach( invoke => {\n          this._scriptingContext.cancelInvoke(invoke.id);\n        })\n\n        //if he is a top-level <final> state, then return the done event\n        if( stateExited.$type === 'final' &&\n            stateExited.parent.$type === 'scxml'){\n\n          if(this.opts.parentSession){\n            this._scriptingContext.send({\n              target: '#_parent', \n              name: 'done.invoke.' + this.opts.invokeid,\n              data : stateExited.donedata && stateExited.donedata.call(this._scriptingContext, event)\n            });\n          }\n\n          this.opts.sessionRegistry.delete(this.opts.sessionid);\n          this.emit('onExitInterpreter', event);\n        }\n    }\n\n  }\n\n  /** \n   * Starts the interpreter. Should only be called once, and should be called\n   * before BaseInterpreter.prototype#gen is called for the first time.  Returns a\n   * Configuration.\n   * @return {Configuration}\n   * @memberof BaseInterpreter.prototype\n   * @emits scion.BaseInterpreter#onEntry\n   * @emits scion.BaseInterpreter#onExit\n   * @emits scion.BaseInterpreter#onTransition\n   * @emits scion.BaseInterpreter#onDefaultEntry\n   * @emits scion.BaseInterpreter#onError\n   * @emits scion.BaseInterpreter#onBigStepBegin\n   * @emits scion.BaseInterpreter#onBigStepEnd\n   * @emits scion.BaseInterpreter#onBigStepSuspend\n   * @emits scion.BaseInterpreter#onBigStepResume\n   * @emits scion.BaseInterpreter#onSmallStepBegin\n   * @emits scion.BaseInterpreter#onSmallStepEnd\n   * @emits scion.BaseInterpreter#onBigStepEnd\n   * @emits scion.BaseInterpreter#onExitInterpreter\n   */\n  start() {\n      this._initStart();\n      this._performBigStep();\n      return this.getConfiguration();\n  }\n\n\n  /**\n   * This callback is displayed as a global member.\n   * @callback genCallback\n   * @param {Error} err\n   * @param {Configuration} configuration\n   */\n\n  /**\n   * Starts the interpreter asynchronously\n   * @param  {genCallback} cb Callback invoked with an error or the interpreter's stable configuration\n   * @memberof BaseInterpreter.prototype \n   * @emits scion.BaseInterpreter#onEntry\n   * @emits scion.BaseInterpreter#onExit\n   * @emits scion.BaseInterpreter#onTransition\n   * @emits scion.BaseInterpreter#onDefaultEntry\n   * @emits scion.BaseInterpreter#onError\n   * @emits scion.BaseInterpreter#onBigStepBegin\n   * @emits scion.BaseInterpreter#onBigStepEnd\n   * @emits scion.BaseInterpreter#onBigStepSuspend\n   * @emits scion.BaseInterpreter#onBigStepResume\n   * @emits scion.BaseInterpreter#onSmallStepBegin\n   * @emits scion.BaseInterpreter#onSmallStepEnd\n   * @emits scion.BaseInterpreter#onBigStepEnd\n   * @emits scion.BaseInterpreter#onExitInterpreter\n   */\n  startAsync(cb) {\n      cb = this._initStart(cb);\n      this.genAsync(null, cb);\n  }\n\n  _initStart(cb){\n      if (typeof cb !== 'function') {\n          cb = nop;\n      }\n\n      this._log(\"performing initial big step\");\n\n      //We effectively need to figure out states to enter here to populate initial config. assuming root is compound state makes this simple.\n      //but if we want it to be parallel, then this becomes more complex. so when initializing the model, we add a 'fake' root state, which\n      //makes the following operation safe.\n      this._model.initialRef.forEach( s => this._configuration.add(s) );\n\n      return cb;\n  }\n\n  /** \n  * Returns state machine {@link Configuration}.\n  * @return {Configuration}\n  * @memberof BaseInterpreter.prototype \n  */\n  getConfiguration() {\n      return this._configuration.iter().map(function(s){return s.id;});\n  }\n\n  _getFullConfiguration(){\n      return this._configuration.iter().\n              map(function(s){ return [s].concat(query.getAncestors(s));},this).\n              reduce(function(a,b){return a.concat(b);},[]).    //flatten\n              reduce(function(a,b){return a.indexOf(b) > -1 ? a : a.concat(b);},[]); //uniq\n  }\n\n\n  /** \n  * @return {FullConfiguration}\n  * @memberof BaseInterpreter.prototype \n  */\n  getFullConfiguration() {\n      return this._getFullConfiguration().map(function(s){return s.id;});\n  }\n\n\n  /** \n  * @return {boolean}\n  * @memberof BaseInterpreter.prototype \n  * @param {string} stateName\n  */\n  isIn(stateName) {\n      return this.getFullConfiguration().indexOf(stateName) > -1;\n  }\n\n  /** \n  * Is the state machine in a final state?\n  * @return {boolean}\n  * @memberof BaseInterpreter.prototype \n  */\n  isFinal() {\n      return this._isInFinalState;\n  }\n\n  /** @private */\n  _performBigStep(e) {\n      let currentEvent, keepGoing, allStatesExited, allStatesEntered;\n      [allStatesExited, allStatesEntered, keepGoing, currentEvent] = this._startBigStep(e);\n\n      while (keepGoing) {\n        [currentEvent, keepGoing] = this._selectTransitionsAndPerformSmallStep(currentEvent, allStatesEntered, allStatesExited);\n      }\n\n      this._finishBigStep(currentEvent, allStatesEntered, allStatesExited);\n  }\n\n  _selectTransitionsAndPerformSmallStep(currentEvent, allStatesEntered, allStatesExited){\n      //first select with null event\n      var selectedTransitions  = this._selectTransitions(currentEvent, true);\n      if(selectedTransitions.isEmpty()){\n        let ev = this._internalEventQueue.shift();\n        if(ev){ \n          currentEvent = ev;\n          selectedTransitions = this._selectTransitions(currentEvent, false);\n        }\n      }\n\n      if(!selectedTransitions.isEmpty()){\n        this.emit('onSmallStepBegin', currentEvent);\n        let statesExited, statesEntered;\n        [statesExited, statesEntered] = this._performSmallStep(currentEvent, selectedTransitions);\n        if(statesExited) statesExited.forEach( s => allStatesExited.add(s) );\n        if(statesEntered) statesEntered.forEach( s => allStatesEntered.add(s) );\n        this.emit('onSmallStepEnd', currentEvent);\n      }\n      let keepGoing = !selectedTransitions.isEmpty() || this._internalEventQueue.length;\n      return [currentEvent, keepGoing];\n  }\n\n  _startBigStep(e){\n      this.emit('onBigStepBegin', e);\n\n      //do applyFinalize and autoforward\n      this._configuration.iter().forEach(state => {\n        if(state.invokes) state.invokes.forEach( invoke =>  {\n          if(invoke.autoforward){\n            //autoforward\n            this._scriptingContext.send({\n              target: `#_${invoke.id}`, \n              name: e.name,\n              data : e.data\n            });\n          }\n          if(invoke.id === e.invokeid){\n            //applyFinalize\n            if(invoke.finalize) invoke.finalize.forEach( action =>  this._evaluateAction(e, action));\n          } \n        })\n      }); \n\n      if (e) this._internalEventQueue.push(e);\n\n      let allStatesExited = new Set(), allStatesEntered = new Set();\n      let keepGoing = true;\n      let currentEvent = e;\n      return [allStatesEntered, allStatesExited, keepGoing, currentEvent];\n  }\n\n  _finishBigStep(e, allStatesEntered, allStatesExited, cb){\n      let statesToInvoke = Array.from(new Set([...allStatesEntered].filter(s => s.invokes && !allStatesExited.has(s)))).sort(sortInEntryOrder);\n\n      // Here we invoke whatever needs to be invoked. The implementation of 'invoke' is platform-specific\n      statesToInvoke.forEach( s => {\n          s.invokes.forEach( f =>  this._evaluateAction(e,f) )\n      });\n\n      // cancel invoke for allStatesExited\n      allStatesExited.forEach( s => {\n        if(s.invokes) s.invokes.forEach( invoke => {\n          this._scriptingContext.cancelInvoke(invoke.id);\n        })\n      });\n\n      // TODO: Invoking may have raised internal error events and we iterate to handle them        \n      //if not internalQueue.isEmpty():\n      //    continue\n\n      this._isInFinalState = this._configuration.iter().every(function(s){ return s.typeEnum === FINAL; });\n      if(this._isInFinalState){\n        this._exitInterpreter(e);\n      }\n      this.emit('onBigStepEnd', e);\n      if(cb) cb(undefined, this.getConfiguration());\n  }\n\n  _cancelAllDelayedSends(){\n    for( let timeoutOptions of this._scriptingContext._timeouts){\n      if(!timeoutOptions.sendOptions.delay) continue;\n      this._log('cancelling delayed send', timeoutOptions);\n      clearTimeout(timeoutOptions.timeoutHandle);\n      this._scriptingContext._timeouts.delete(timeoutOptions);\n    }\n    Object.keys(this._scriptingContext._timeoutMap).forEach(function(key){\n      delete this._scriptingContext._timeoutMap[key];\n    }, this);\n  }\n\n  _performBigStepAsync(e, cb) {\n      let currentEvent, keepGoing, allStatesExited, allStatesEntered;\n      [allStatesExited, allStatesEntered, keepGoing, currentEvent] = this._startBigStep(e);\n\n      function nextStep(emit){\n        this.emit(emit);\n        [currentEvent, keepGoing] = this._selectTransitionsAndPerformSmallStep(currentEvent, allStatesEntered, allStatesExited);\n\n        if(keepGoing){\n          this.emit('onBigStepSuspend');\n          setImmediate(nextStep.bind(this,'onBigStepResume'));\n        }else{\n          this._finishBigStep(currentEvent, allStatesEntered, allStatesExited, cb);\n        }\n      }\n      nextStep.call(this,'onBigStepBegin');\n  }\n\n  /** @private */\n  _performSmallStep(currentEvent, selectedTransitions) {\n\n      this._log(\"selecting transitions with currentEvent\", currentEvent);\n\n      this._log(\"selected transitions\", selectedTransitions);\n\n      let statesExited,\n          statesEntered;\n\n      if (!selectedTransitions.isEmpty()) {\n\n          //we only want to enter and exit states from transitions with targets\n          //filter out targetless transitions here - we will only use these to execute transition actions\n          var selectedTransitionsWithTargets = new this.opts.Set(selectedTransitions.iter().filter(transitionWithTargets));\n\n          statesExited = this._exitStates(currentEvent, selectedTransitionsWithTargets)\n          this._executeTransitions(currentEvent, selectedTransitions);\n          statesEntered = this._enterStates(currentEvent, selectedTransitionsWithTargets)\n\n          this._log(\"new configuration \", this._configuration);\n      }\n\n      return [statesExited, statesEntered];\n  }\n\n  _exitStates(currentEvent, selectedTransitionsWithTargets){\n      let basicStatesExited, statesExited;\n      [basicStatesExited, statesExited] = this._getStatesExited(selectedTransitionsWithTargets); \n\n      this._log('exiting states')\n      for (var j = 0, len = statesExited.length; j < len; j++) {\n          var stateExited = statesExited[j];\n\n          if(stateExited.isAtomic) this._configuration.remove(stateExited);\n\n          this._log(\"exiting \", stateExited.id);\n\n          //invoke listeners\n          this.emit('onExit',stateExited.id)\n\n          if(stateExited.onExit !== undefined) {\n              for (var exitIdx = 0, exitLen = stateExited.onExit.length; exitIdx < exitLen; exitIdx++) {\n                  let block = stateExited.onExit[exitIdx];\n                  for (let blockIdx = 0, blockLen = block.length; blockIdx < blockLen; blockIdx++) {\n                      let actionRef = block[blockIdx];\n                      try {\n                        actionRef.call(this._scriptingContext, currentEvent);\n                      } catch (e){\n                        this._handleError(e, actionRef);\n                        break;\n                      }\n                  }\n              }\n          }\n\n          var f;\n          if (stateExited.historyRef) {\n              for(let historyRef of stateExited.historyRef){\n                  if (historyRef.isDeep) {\n                      f = function(s0) {\n                          return s0.typeEnum === BASIC && stateExited.descendants.indexOf(s0) > -1;\n                      };\n                  } else {\n                      f = function(s0) {\n                          return s0.parent === stateExited;\n                      };\n                  }\n                  //update history\n                  this._historyValue[historyRef.id] = statesExited.filter(f);\n              }\n          }\n      }\n\n      return statesExited;\n  }\n\n  /** @private */\n  _getStatesExited(transitions) {\n    var statesExited = new this.opts.Set();\n    var basicStatesExited = new this.opts.Set();\n\n    //States exited are defined to be active states that are\n    //descendants of the scope of each priority-enabled transition.\n    //Here, we iterate through the transitions, and collect states\n    //that match this condition. \n    var transitionList = transitions.iter();\n    for (var txIdx = 0, txLen = transitionList.length; txIdx < txLen; txIdx++) {\n      var transition = transitionList[txIdx];\n      var scope = transition.scope,\n          desc = scope.descendants;\n\n      //For each state in the configuration\n      //is that state a descendant of the transition scope?\n      //Store ancestors of that state up to but not including the scope.\n      var configList = this._configuration.iter();\n      for (var cfgIdx = 0, cfgLen = configList.length; cfgIdx < cfgLen; cfgIdx++) {\n        var state = configList[cfgIdx];\n        if(desc.indexOf(state) > -1){\n          basicStatesExited.add(state);\n          statesExited.add(state);\n          var ancestors = query.getAncestors(state,scope); \n          for (var ancIdx = 0, ancLen = ancestors.length; ancIdx < ancLen; ancIdx++) { \n            statesExited.add(ancestors[ancIdx]);\n          }\n        }\n      }\n    }\n\n    var sortedStatesExited = statesExited.iter().sort(getStateWithHigherSourceChildPriority);\n    return [basicStatesExited, sortedStatesExited];\n  }\n\n  _executeTransitions(currentEvent, selectedTransitions){\n      var sortedTransitions = selectedTransitions.iter().sort(transitionComparator);\n\n      this._log(\"executing transitition actions\");\n      for (var stxIdx = 0, len = sortedTransitions.length; stxIdx < len; stxIdx++) {\n          var transition = sortedTransitions[stxIdx];\n\n          var targetIds = transition.targets && transition.targets.map(function(target){return target.id;});\n\n          this.emit('onTransition',transition.source.id,targetIds, transition.source.transitions.indexOf(transition));\n\n          if(transition.onTransition !== undefined) {\n              for (var txIdx = 0, txLen = transition.onTransition.length; txIdx < txLen; txIdx++) {\n                  let actionRef = transition.onTransition[txIdx];\n                  try {\n                    actionRef.call(this._scriptingContext, currentEvent);\n                  } catch (e){\n                    this._handleError(e, actionRef);\n                    break;\n                  }\n              }\n          }\n      }\n  }\n\n  _enterStates(currentEvent, selectedTransitionsWithTargets){\n      this._log(\"entering states\");\n\n      let statesEntered = new Set();\n      let statesForDefaultEntry = new Set();\n      // initialize the temporary table for default content in history states\n      let defaultHistoryContent = {};\n      this._computeEntrySet(selectedTransitionsWithTargets, statesEntered, statesForDefaultEntry, defaultHistoryContent); \n      statesEntered = Array.from(statesEntered).sort(sortInEntryOrder); \n\n      this._log(\"statesEntered \", statesEntered);\n\n      for (var enterIdx = 0, enterLen = statesEntered.length; enterIdx < enterLen; enterIdx++) {\n          var stateEntered = statesEntered[enterIdx];\n\n          if(stateEntered.isAtomic) this._configuration.add(stateEntered);\n\n          this._log(\"entering\", stateEntered.id);\n\n          this.emit('onEntry',stateEntered.id);\n\n          if(stateEntered.onEntry !== undefined) {\n              for (var entryIdx = 0, entryLen = stateEntered.onEntry.length; entryIdx < entryLen; entryIdx++) {\n                  let block = stateEntered.onEntry[entryIdx];\n                  for (let blockIdx = 0, blockLen = block.length; blockIdx < blockLen; blockIdx++) {\n                      let actionRef = block[blockIdx];\n                      try {\n                        actionRef.call(this._scriptingContext, currentEvent);\n                      } catch (e){\n                        this._handleError(e, actionRef);\n                        break;\n                      }\n                  }\n              }\n          }\n\n          if(statesForDefaultEntry.has(stateEntered)){\n              for(let initialState of stateEntered.initialRef){\n                  this.emit('onDefaultEntry', initialState.id);\n                  if(initialState.typeEnum === INITIAL){\n                      let transition = initialState.transitions[0]\n                      if(transition.onTransition !== undefined) {\n                          this._log('executing initial transition content for initial state of parent state',stateEntered.id);\n                          for (var txIdx = 0, txLen = transition.onTransition.length; txIdx < txLen; txIdx++) {\n                              let actionRef = transition.onTransition[txIdx];\n                              try {\n                                actionRef.call(this._scriptingContext, currentEvent);\n                              } catch (e){\n                                this._handleError(e, actionRef);\n                                break;\n                              }\n                          }\n                      }\n                  }\n              }\n          }\n\n\n          if(defaultHistoryContent[stateEntered.id]){\n              let transition = defaultHistoryContent[stateEntered.id]\n              if(transition.onTransition !== undefined) {\n                  this._log('executing history transition content for history state of parent state',stateEntered.id);\n                  for (var txIdx = 0, txLen = transition.onTransition.length; txIdx < txLen; txIdx++) {\n                      let actionRef = transition.onTransition[txIdx];\n                      try {\n                        actionRef.call(this._scriptingContext, currentEvent);\n                      } catch (e){\n                        this._handleError(e, actionRef);\n                        break;\n                      }\n                  }\n              }\n          }\n      }\n\n      for (var enterIdx = 0, enterLen = statesEntered.length; enterIdx < enterLen; enterIdx++) {\n          var stateEntered = statesEntered[enterIdx];\n          if(stateEntered.typeEnum === FINAL){\n            let parent = stateEntered.parent;\n            let grandparent = parent.parent;\n            this._internalEventQueue.push({name : \"done.state.\" + parent.id, data : stateEntered.donedata && stateEntered.donedata.call(this._scriptingContext, currentEvent)});\n            if(grandparent && grandparent.typeEnum === PARALLEL){\n                if(grandparent.states.every(s => this.isInFinalState(s) )){\n                    this._internalEventQueue.push({name : \"done.state.\" + grandparent.id});\n                }\n            }\n          }\n      }\n\n      return statesEntered;\n  }\n\n  _getEffectiveTargetStates(transition){\n    let targets = new Set();\n    for(let s of transition.targets){\n      if(s.typeEnum === HISTORY){\n        if(s.id in this._historyValue)\n          this._historyValue[s.id].forEach( state => targets.add(state))\n        else\n          [...this._getEffectiveTargetStates(s.transitions[0])].forEach( state => targets.add(state))\n      } else {\n        targets.add(s)\n      }\n    }\n    return targets\n  }\n\n  _computeEntrySet(transitions, statesToEnter, statesForDefaultEntry, defaultHistoryContent){\n    for(let t of transitions.iter()){\n      for(let s of t.targets){\n        this._addDescendantStatesToEnter(s,statesToEnter, statesForDefaultEntry, defaultHistoryContent) \n      }\n      let ancestor = t.scope;\n      for(let s of this._getEffectiveTargetStates(t)){\n        this._addAncestorStatesToEnter(s, ancestor, statesToEnter, statesForDefaultEntry, defaultHistoryContent)\n      }\n    }\n  }\n\n  _computeExitSet(transitions) {\n    let statesToExit = new Set();\n    for(let t of transitions){\n      if(t.targets){\n        let scope = t.scope;\n        for(let s of this._getFullConfiguration()){\n          if(query.isDescendant(s,scope)) statesToExit.add(s);\n        }\n      }\n    }\n    return statesToExit; \n  }\n\n  _addAncestorStatesToEnter(state, ancestor, statesToEnter, statesForDefaultEntry, defaultHistoryContent){\n    let traverse = (anc) => {\n      if(anc.typeEnum === PARALLEL){\n        for(let child of anc.states){\n          if(child.typeEnum !== HISTORY && ![...statesToEnter].some(s => query.isDescendant(s, child))){\n            this._addDescendantStatesToEnter(child,statesToEnter, statesForDefaultEntry, defaultHistoryContent) \n          }\n        }\n      }\n    };\n    for(let anc of query.getAncestors(state,ancestor)){\n      statesToEnter.add(anc)\n      traverse(anc)\n    }\n    traverse(ancestor)\n  }\n\n\n  _addDescendantStatesToEnter(state,statesToEnter, statesForDefaultEntry, defaultHistoryContent){\n    if(state.typeEnum === HISTORY){\n      if(this._historyValue[state.id]){\n        for(let s of this._historyValue[state.id])\n          this._addDescendantStatesToEnter(s,statesToEnter, statesForDefaultEntry, defaultHistoryContent)\n\n        for(let s of this._historyValue[state.id])\n          this._addAncestorStatesToEnter(s, state.parent, statesToEnter, statesForDefaultEntry, defaultHistoryContent)\n      } else {\n        defaultHistoryContent[state.parent.id] = state.transitions[0]\n        for(let s of state.transitions[0].targets)\n          this._addDescendantStatesToEnter(s,statesToEnter,statesForDefaultEntry, defaultHistoryContent)\n\n        for(let s of state.transitions[0].targets)\n          this._addAncestorStatesToEnter(s, state.parent, statesToEnter, statesForDefaultEntry, defaultHistoryContent)\n\n      }\n    } else {\n      statesToEnter.add(state)\n        if(state.typeEnum === COMPOSITE){\n          statesForDefaultEntry.add(state)\n          //for each state in initialRef, if it is an initial state, then add ancestors and descendants.\n          for(let s of state.initialRef){\n            let targets = s.typeEnum === INITIAL ? s.transitions[0].targets : [s]; \n            for(let targetState of targets){\n              this._addDescendantStatesToEnter(targetState,statesToEnter, statesForDefaultEntry, defaultHistoryContent)\n            }\n          }\n          for(let s of state.initialRef){\n            let targets = s.typeEnum === INITIAL ? s.transitions[0].targets : [s]; \n            for(let targetState of targets){\n              this._addAncestorStatesToEnter(targetState, state, statesToEnter, statesForDefaultEntry, defaultHistoryContent)\n            }\n          }\n        }else{\n          if(state.typeEnum === PARALLEL){\n            for(let child of state.states){\n              if(child.typeEnum !== HISTORY && ![...statesToEnter].some(s => query.isDescendant(s, child))){\n                this._addDescendantStatesToEnter(child,statesToEnter, statesForDefaultEntry, defaultHistoryContent) \n              }\n            }\n          }\n        }\n    }\n  }\n\n  isInFinalState(s){\n      if(s.typeEnum === COMPOSITE){\n          return s.states.some(s => s.typeEnum === FINAL && this._configuration.contains(s));\n      }else if(s.typeEnum === PARALLEL){\n          return s.states.every(this.isInFinalState.bind(this))\n      }else{\n          return false\n      }\n  }\n\n  /** @private */\n  _evaluateAction(currentEvent, actionRef) {\n      try {\n        return actionRef.call(this._scriptingContext, currentEvent);     //SCXML system variables\n      } catch (e){\n        this._handleError(e, actionRef);\n      }\n  }\n\n  _handleError(e, actionRef){\n    let event = \n      e instanceof Error || (typeof e.__proto__.name === 'string' && e.__proto__.name.match(/^.*Error$/)) ?  //we can't just do 'e instanceof Error', because the Error object in the sandbox is from a different context, and instanceof will return false\n        {\n          name:'error.execution',\n          data : {\n            tagname: actionRef.tagname, \n            line: actionRef.line, \n            column: actionRef.column,\n            reason: e.message\n          },\n          type : 'platform'\n        } : \n        (e.name ? \n          e : \n          {\n            name:'error.execution',\n            data:e,\n            type : 'platform'\n          }\n        );\n    this._internalEventQueue.push(event);\n    this.emit('onError', event);\n  }\n\n  _log(){\n    if(printTrace){\n      var args = Array.from(arguments);\n      this.opts.console.log( \n        `${args[0]}: ${\n          args.slice(1).map(function(arg){\n            return arg === null ? 'null' : \n              ( arg === undefined ? 'undefined' : \n                ( typeof arg === 'string' ? arg : \n                  ( arg.toString() === '[object Object]' ? util.inspect(arg) : arg.toString())));\n\n          }).join(', ')\n        }\\n`\n      );\n    }\n  }\n\n  /**\n  * @interface Listener\n  */\n\n  /**\n  * @function\n  * @name Listener#onEntry \n  * @param {string} stateId\n  */\n\n  /**\n  * @function\n  * @name Listener#onExit \n  * @param {string} stateId\n  */\n\n  /**\n  * @function\n  * @name Listener#onTransition \n  * @param {string} sourceStateId Id of the source state\n  * @param {Array<string>} targetStatesIds Ids of the target states\n  * @param {number} transitionIndex Index of the transition relative to other transitions originating from source state.\n  */\n\n  /**\n  * @function\n  * @name Listener#onError\n  * @param {Error} errorInfo\n  */\n\n  /**\n  * @function\n  * @name Listener#onBigStepBegin\n  */\n\n  /**\n  * @function\n  * @name Listener#onBigStepResume\n  */\n\n  /**\n  * @function\n  * @name Listener#onBigStepSuspend\n  */\n\n  /**\n  * @function\n  * @name Listener#onBigStepEnd\n  */\n\n  /**\n  * @function\n  * @name Listener#onSmallStepBegin\n  * @param {string} event\n  */\n\n  /**\n  * @function\n  * @name Listener#onSmallStepEnd\n  */\n\n\n  /** \n  * Provides a generic mechanism to subscribe to state change and runtime\n  * error notifications.  Can be used for logging and debugging. For example,\n  * can attach a logger that simply logs the state changes.  Or can attach a\n  * network debugging client that sends state change notifications to a\n  * debugging server.\n  * This is an alternative interface to {@link EventEmitter.prototype#on}.\n  * @memberof BaseInterpreter.prototype \n  * @param {Listener} listener\n  */\n  registerListener(listener){\n      BaseInterpreter.EVENTS.forEach(function(event){\n        if(listener[event]) this.on(event,listener[event]);\n      }, this);\n  }\n\n  /** \n  * Unregister a Listener\n  * @memberof BaseInterpreter.prototype \n  * @param {Listener} listener\n  */\n  unregisterListener(listener){\n      BaseInterpreter.EVENTS.forEach(function(event){\n        if(listener[event]) this.off(event,listener[event]);\n      }, this);\n  }\n\n  /** \n  * Query the model to get all transition events.\n  * @return {Array<string>} Transition events.\n  * @memberof BaseInterpreter.prototype \n  */\n  getAllTransitionEvents(){\n      var events = {};\n      function getEvents(state){\n\n          if(state.transitions){\n              for (var txIdx = 0, txLen = state.transitions.length; txIdx < txLen; txIdx++) {\n                  events[state.transitions[txIdx].event] = true;\n              }\n          }\n\n          if(state.states) {\n              for (var stateIdx = 0, stateLen = state.states.length; stateIdx < stateLen; stateIdx++) {\n                  getEvents(state.states[stateIdx]);\n              }\n          }\n      }\n\n      getEvents(this._model);\n\n      return Object.keys(events);\n  }\n\n  /**\n  * Three things capture the current snapshot of a running SCION interpreter:\n  *\n  *      <ul>\n  *      <li> basic configuration (the set of basic states the state machine is in)</li>\n  *      <li> history state values (the states the state machine was in last time it was in the parent of a history state)</li>\n  *      <li> the datamodel</li>\n  *      </ul>\n  *      \n  * The snapshot object can be serialized as JSON and saved to a database. It can\n  * later be passed to the SCXML constructor to restore the state machine\n  * using the snapshot argument.\n  *\n  * @return {Snapshot} \n  * @memberof BaseInterpreter.prototype \n  */\n  getSnapshot(){\n    return [\n      this.getConfiguration(),\n      this._serializeHistory(),\n      this._isInFinalState,\n      this._model.$serializeDatamodel(),\n      this._internalEventQueue.slice()\n    ];\n  }\n\n  _serializeHistory(){\n    var o = {};\n    Object.keys(this._historyValue).forEach(function(sid){\n      o[sid] = this._historyValue[sid].map(function(state){return state.id});\n    },this);\n    return o;\n  }\n\n\n  /**\n   * @interface Event\n   */\n\n  /** \n  * @member name\n  * @memberof Event.prototype \n  * @type string\n  * @description The name of the event\n  */\n\n  /** \n  * @member data\n  * @memberof Event.prototype \n  * @type any\n  * @description The event data\n  */\n\n  /** \n  * An SCXML interpreter takes SCXML events as input, where an SCXML event is an\n  * object with \"name\" and \"data\" properties. These can be passed to method `gen`\n  * as two positional arguments, or as a single object.\n  * @param {string|Event} evtObjOrName\n  * @param {any=} optionalData\n  * @emits scion.BaseInterpreter#onEntry\n  * @emits scion.BaseInterpreter#onExit\n  * @emits scion.BaseInterpreter#onTransition\n  * @emits scion.BaseInterpreter#onDefaultEntry\n  * @emits scion.BaseInterpreter#onError\n  * @emits scion.BaseInterpreter#onBigStepBegin\n  * @emits scion.BaseInterpreter#onBigStepEnd\n  * @emits scion.BaseInterpreter#onBigStepSuspend\n  * @emits scion.BaseInterpreter#onBigStepResume\n  * @emits scion.BaseInterpreter#onSmallStepBegin\n  * @emits scion.BaseInterpreter#onSmallStepEnd\n  * @emits scion.BaseInterpreter#onBigStepEnd\n  * @emits scion.BaseInterpreter#onExitInterpreter\n  */\n  gen(evtObjOrName,optionalData) {\n    var currentEvent;\n    switch(typeof evtObjOrName){\n      case 'string':\n        currentEvent = {name : evtObjOrName, data : optionalData};\n        break;\n      case 'object':\n        if(typeof evtObjOrName.name === 'string'){\n          currentEvent = evtObjOrName;\n        }else{\n          throw new Error('Event object must have \"name\" property of type string.');\n        }\n        break;\n      default:\n        throw new Error('First argument to gen must be a string or object.');\n    }\n\n    if(this._isStepping) throw new Error('Cannot call gen during a big-step');\n\n    //otherwise, kick him off\n    this._isStepping = true;\n\n    this._performBigStep(currentEvent);\n\n    this._isStepping = false;\n    return this.getConfiguration();\n  }\n\n  /**\n  * Injects an external event into the interpreter asynchronously\n  * @param {Event}  currentEvent The event to inject\n  * @param {genCallback} cb Callback invoked with an error or the interpreter's stable configuration\n  * @emits scion.BaseInterpreter#onEntry\n  * @emits scion.BaseInterpreter#onExit\n  * @emits scion.BaseInterpreter#onTransition\n  * @emits scion.BaseInterpreter#onDefaultEntry\n  * @emits scion.BaseInterpreter#onError\n  * @emits scion.BaseInterpreter#onBigStepBegin\n  * @emits scion.BaseInterpreter#onBigStepEnd\n  * @emits scion.BaseInterpreter#onBigStepSuspend\n  * @emits scion.BaseInterpreter#onBigStepResume\n  * @emits scion.BaseInterpreter#onSmallStepBegin\n  * @emits scion.BaseInterpreter#onSmallStepEnd\n  * @emits scion.BaseInterpreter#onBigStepEnd\n  * @emits scion.BaseInterpreter#onExitInterpreter\n  */\n  genAsync(currentEvent, cb) {\n    if (currentEvent !== null && (typeof currentEvent !== 'object' || !currentEvent || typeof currentEvent.name !== 'string')) {\n      throw new Error('Expected currentEvent to be null or an Object with a name');\n    }\n    \n    if (typeof cb !== 'function') {\n      cb = nop;\n    }\n\n    this._externalEventQueue.push([currentEvent, cb]);\n\n    //the semantics we want are to return to the cb the results of processing that particular event.\n    function nextStep(e, c){\n      this._performBigStepAsync(e, function(err, config) {\n        c(err, config);\n\n        if(this._externalEventQueue.length){\n          nextStep.apply(this,this._externalEventQueue.shift());\n        }else{\n          this._isStepping = false;\n        }\n      }.bind(this));\n    }\n    if(!this._isStepping){ \n      this._isStepping = true;\n      nextStep.apply(this,this._externalEventQueue.shift());\n    }\n  }\n}\n\nBaseInterpreter.EVENTS = [\n  'onEntry',\n  'onExit',\n  'onTransition',\n  'onDefaultEntry',\n  'onError',\n  'onBigStepBegin',\n  'onBigStepSuspend',\n  'onBigStepResume',\n  'onSmallStepBegin',\n  'onSmallStepEnd',\n  'onBigStepEnd',\n  'onExitInterpreter'\n];\n\n//some global singletons to use to generate in-memory session ids, in case the user does not specify these data structures\nBaseInterpreter.sessionIdCounter = 1;\nBaseInterpreter.generateSessionid = function(){\n  return BaseInterpreter.sessionIdCounter++;\n}\nBaseInterpreter.sessionRegistry = new Map();\n\n// Do nothing\n\nfunction nop() {}\n\n\nclass InterpreterScriptingContext{\n  constructor(interpreter){ \n    this._interpreter = interpreter;\n    this._timeoutMap = {};\n    this._invokeMap = {};\n    this._timeouts = new Set()\n\n    //Regex from:\n    //  http://daringfireball.net/2010/07/improved_regex_for_matching_urls\n    //  http://stackoverflow.com/a/6927878\n    this.validateUriRegex = /(#_.*)|\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/i;\n\n    this.invokeSendTargetRegex = /^#_(.*)$/;\n    this.scxmlSendTargetRegex = /^#_scxml_(.*)$/;\n  }\n\n\n  raise(event){\n    this._installDefaultPropsOnEvent(event, true);\n    this._interpreter._internalEventQueue.push(event); \n  }\n\n  parseXmlStringAsDOM(xmlString){\n    return (this._interpreter.opts.xmlParser || InterpreterScriptingContext.xmlParser).parse(xmlString);\n  }\n\n  invoke(invokeObj){\n    //look up invoker by type. assume invokers are passed in as an option to constructor\n    this._invokeMap[invokeObj.id] = new Promise((resolve, reject) => {\n      (this._interpreter.opts.invokers || InterpreterScriptingContext.invokers)[invokeObj.type](this._interpreter, invokeObj, this._interpreter.opts.invokerExecutionContext, (err, session) => {\n        if(err) return reject(err);\n\n        this._interpreter.emit('onInvokedSessionInitialized', session);\n        resolve(session);\n      });\n    });\n  }\n\n  cancelInvoke(invokeid){\n    //TODO: on cancel invoke clean up this._invokeMap\n    let sessionPromise = this._invokeMap[invokeid];\n    this._interpreter._log(`cancelling session with invokeid ${invokeid}`);\n    if(sessionPromise){\n      this._interpreter._log(`sessionPromise found`);\n      sessionPromise.then( \n        ((session) => {\n          this._interpreter._log(`resolved session ${invokeid}. cancelling... `);\n          session.cancel(); \n          //clean up\n          delete this._invokeMap[invokeid];\n        }), \n        ( (err) => {\n          //TODO: dispatch error back into the state machine as error.communication\n        }));\n    }\n  }\n\n  _installDefaultPropsOnEvent(event,isInternal){\n    if(!isInternal){ \n      event.origin = this._interpreter.opts._x._ioprocessors.scxml.location;     //TODO: preserve original origin when we autoforward? \n      event.origintype = event.type || SCXML_IOPROCESSOR_TYPE;\n    }\n    if(typeof event.type === 'undefined'){\n      event.type = isInternal ? 'internal' : 'external';\n    }\n    [\n      'name',\n      'sendid',\n      'invokeid',\n      'data',\n      'origin',\n      'origintype'\n    ].forEach(prop => {\n      if(typeof event[prop] === 'undefined'){\n        event[prop] = undefined;\n      }\n    });\n  }\n\n  send(event, options){\n    this._interpreter._log('send event', event, options);\n    options = options || {};\n    var sendType = options.type || SCXML_IOPROCESSOR_TYPE;\n    //TODO: move these out\n    function validateSend(event, options, sendAction){\n      if(event.target){\n        var targetIsValidUri = this.validateUriRegex.test(event.target)\n        if(!targetIsValidUri){\n          throw { name : \"error.execution\", data: 'Target is not valid URI', sendid: event.sendid, type : 'platform' };\n        }\n      }\n      if( sendType !== SCXML_IOPROCESSOR_TYPE) {  //TODO: extend this to support HTTP, and other IO processors\n        throw { name : \"error.execution\", data: 'Unsupported event processor type', sendid: event.sendid, type : 'platform' };\n      }\n\n      sendAction.call(this, event, options);\n    }\n\n    function defaultSendAction (event, options) {\n\n      if( typeof setTimeout === 'undefined' ) throw new Error('Default implementation of BaseInterpreter.prototype.send will not work unless setTimeout is defined globally.');\n\n      var match;\n      if(event.target === '#_internal'){\n        this.raise(event);\n      }else{ \n        this._installDefaultPropsOnEvent(event, false);\n        event.origintype = SCXML_IOPROCESSOR_TYPE;      //TODO: extend this to support HTTP, and other IO processors\n                                                        //TODO : paramterize this based on send/@type?\n        if(!event.target){\n          doSend.call(this, this._interpreter);\n        }else if(event.target === '#_parent'){\n          if(this._interpreter.opts.parentSession){\n            event.invokeid = this._interpreter.opts.invokeid;\n            doSend.call(this, this._interpreter.opts.parentSession);\n          }else{\n            throw { name : \"error.communication\", data: 'Parent session not specified', sendid: event.sendid, type : 'platform' };\n          }\n        } else if(match = event.target.match(this.scxmlSendTargetRegex)){\n          let targetSessionId = match[1];\n          let session = this._interpreter.opts.sessionRegistry.get(targetSessionId)\n          if(session){\n            doSend.call(this,session);\n          }else {\n            throw {name : 'error.communication', sendid: event.sendid, type : 'platform'};\n          }\n        }else if(match = event.target.match(this.invokeSendTargetRegex)){\n          //TODO: test this code path.\n          var invokeId = match[1]\n          this._invokeMap[invokeId].then( (session) => {\n            doSend.call(this,session);\n          })\n        } else {\n          throw new Error('Unrecognized send target.'); //TODO: dispatch error back into the state machine\n        }\n      }\n\n      function doSend(session){\n        //TODO: we probably now need to refactor data structures:\n        //    this._timeouts\n        //    this._timeoutMap\n        var timeoutHandle = setTimeout(function(){\n          if (event.sendid) delete this._timeoutMap[event.sendid];\n          this._timeouts.delete(timeoutOptions);\n          if(this._interpreter.opts.doSend){\n            this._interpreter.opts.doSend(session, event);\n          }else{\n            session[this._interpreter.opts.sendAsync ? 'genAsync' : 'gen'](event);\n          }\n        }.bind(this), options.delay || 0);\n\n        var timeoutOptions = {\n          sendOptions : options,\n          timeoutHandle : timeoutHandle\n        };\n        if (event.sendid) this._timeoutMap[event.sendid] = timeoutHandle;\n        this._timeouts.add(timeoutOptions); \n      }\n    }\n\n    function publish(){\n      this._interpreter.emit(event.name,event.data);\n    }\n\n    //choose send function\n    //TODO: rethink how this custom send works\n    var sendFn;         \n    if(event.type === 'https://github.com/jbeard4/SCION#publish'){\n      sendFn = publish;\n    }else if(this._interpreter.opts.customSend){\n      sendFn = this._interpreter.opts.customSend;\n    }else{\n      sendFn = defaultSendAction;\n    }\n\n    options=options || {};\n\n    this._interpreter._log(\"sending event\", event.name, \"with content\", event.data, \"after delay\", options.delay);\n\n    validateSend.call(this, event, options, sendFn);\n  }\n\n  cancel(sendid){\n    if(this._interpreter.opts.customCancel) {\n      return this._interpreter.opts.customCancel.apply(this, [sendid]);\n    }\n\n    if( typeof clearTimeout === 'undefined' ) throw new Error('Default implementation of BaseInterpreter.prototype.cancel will not work unless setTimeout is defined globally.');\n\n    if (sendid in this._timeoutMap) {\n      this._interpreter._log(\"cancelling \", sendid, \" with timeout id \", this._timeoutMap[sendid]);\n      clearTimeout(this._timeoutMap[sendid]);\n    }\n  }\n}\n\nmodule.exports = extend(new EventEmitter, {\n    BaseInterpreter: BaseInterpreter,\n    ArraySet : ArraySet,\n    STATE_TYPES : constants.STATE_TYPES,\n    initializeModel : initializeModel,\n    InterpreterScriptingContext : InterpreterScriptingContext,\n    helpers: helpers,\n    query: query\n});\n","const base = require('@scion-scxml/core-base'),\n      helpers = base.helpers,\n      query = base.query,\n      transitionComparator = base.helpers.transitionComparator;\n\n/** \n * @description Implements semantics described in Algorithm D of the SCXML specification. \n * See {@link scion.BaseInterpreter} for information on the constructor arguments.\n * @class SCInterpreter \n * @extends BaseInterpreter\n */\nclass Statechart extends base.BaseInterpreter {\n\n  constructor(modelOrModelFactory, opts){\n\n    opts = opts || {};\n    opts.legacySemantics = false;\n\n    super(modelOrModelFactory, opts);\n  }\n\n  /** @private */\n  _selectTransitions(currentEvent, selectEventlessTransitions) {\n    var transitionSelector = this.opts.transitionSelector;\n    var enabledTransitions = new this.opts.Set();\n\n    var e = this._evaluateAction.bind(this,currentEvent);\n\n    let atomicStates = this._configuration.iter().sort(transitionComparator);\n    for(let state of atomicStates){\nloop: for(let s of [state].concat(query.getAncestors(state))){\n        for(let t of s.transitions){\n          if(transitionSelector(t, currentEvent, e, selectEventlessTransitions)){\n            enabledTransitions.add(t);\n            break loop;\n          }\n        }\n      }\n    }\n\n    var priorityEnabledTransitions = this._removeConflictingTransition(enabledTransitions);\n\n    this._log(\"priorityEnabledTransitions\", priorityEnabledTransitions);\n\n    return priorityEnabledTransitions;\n  }\n\n  /** @private */\n  _removeConflictingTransition(enabledTransitions) {\n    let filteredTransitions = new this.opts.Set()\n    //toList sorts the transitions in the order of the states that selected them\n    for( let t1 of enabledTransitions.iter()){\n      let t1Preempted = false;\n      let transitionsToRemove = new Set()\n      for (let t2 of filteredTransitions.iter()){\n        //TODO: can we compute this statically? for example, by checking if the transition scopes are arena orthogonal?\n        let t1ExitSet = this._computeExitSet([t1]);\n        let t2ExitSet = this._computeExitSet([t2]);\n        let hasIntersection = [...t1ExitSet].some( s => t2ExitSet.has(s) )  || [...t2ExitSet].some( s => t1ExitSet.has(s));\n        this._log('t1ExitSet',t1.source.id,[...t1ExitSet].map( s => s.id ))\n          this._log('t2ExitSet',t2.source.id,[...t2ExitSet].map( s => s.id ))\n          this._log('hasIntersection',hasIntersection)\n          if(hasIntersection){\n            if(t2.source.descendants.indexOf(t1.source) > -1){    //is this the same as being ancestrally related?\n              transitionsToRemove.add(t2)\n            }else{ \n              t1Preempted = true;\n              break\n            }\n          }\n      }\n      if(!t1Preempted){\n        for(let t3 of transitionsToRemove){\n          filteredTransitions.remove(t3)\n        }\n        filteredTransitions.add(t1)\n      }\n    }\n\n    return filteredTransitions;\n  }\n}\n\nbase.Statechart = Statechart;\n//simple default invoker\nbase.InterpreterScriptingContext.invokers = {\n  \"http://www.w3.org/TR/scxml/\" : function(invokingSession, invokeObj, invokerExecutionContext, cb){\n    //put invoke logic here: \n    let method, arg;\n    if(invokeObj.constructorFunction){\n      const fnModel = invokeObj.constructorFunction;\n      const options = {\n        invokeid : invokeObj.id,\n        params : invokeObj.params,\n        parentSession : invokingSession,\n        docUrl : invokeObj.docUrl\n        //sessionid : //TODO: construct or generate a sessionid for invoked session\n      };\n      const model = invokerExecutionContext;\n      let interpreter;\n      if( options.parentSession instanceof Statechart ){\n        interpreter = new Statechart(fnModel, options);\n      } \n      cb(null, interpreter, fnModel, model);\n      //we introduce a delay here before starting the interpreter to give clients that are subscribed to onInvokedSessionInitialized event a chance to subscribe to events on the newly instantiated interpreter\n      setImmediate( () => interpreter.start() );    \n    } else{\n      throw new Error('Invoke object needs a constructorFunction property' );\n    }\n  }\n};\nbase.InterpreterScriptingContext.invokers[undefined] = \n  base.InterpreterScriptingContext.invokers[null] = \n  base.InterpreterScriptingContext.invokers['scxml'] = \n  base.InterpreterScriptingContext.invokers[\"http://www.w3.org/TR/scxml/\"];\n\nmodule.exports = base;\n","function EventEmitter() {\n    this._listeners = {};\n}\n\nEventEmitter.prototype.on = function _on(type, listener) {\n    if (!Array.isArray(this._listeners[type])) {\n        this._listeners[type] = [];\n    }\n\n    if (this._listeners[type].indexOf(listener) === -1) {\n        this._listeners[type].push(listener);\n    }\n\n    return this;\n};\n\nEventEmitter.prototype.once = function _once(type, listener) {\n    var self = this;\n\n    function __once() {\n        for (var args = [], i = 0; i < arguments.length; i += 1) {\n            args[i] = arguments[i];\n        }\n\n        self.off(type, __once);\n        listener.apply(self, args);\n    }\n\n    __once.listener = listener;\n\n    return this.on(type, __once);\n};\n\nEventEmitter.prototype.off = function _off(type, listener) {\n    if (!Array.isArray(this._listeners[type])) {\n        return this;\n    }\n\n    if (typeof listener === 'undefined') {\n        this._listeners[type] = [];\n        return this;\n    }\n\n    var index = this._listeners[type].indexOf(listener);\n\n    if (index === -1) {\n        for (var i = 0; i < this._listeners[type].length; i += 1) {\n            if (this._listeners[type][i].listener === listener) {\n                index = i;\n                break;\n            }\n        }\n    }\n\n    this._listeners[type].splice(index, 1);\n    return this;\n};\n\nEventEmitter.prototype.emit = function _emit(type) {\n    if (!Array.isArray(this._listeners[type])) {\n        return this;\n    }\n\n    for (var args = [], i = 1; i < arguments.length; i += 1) {\n        args[i - 1] = arguments[i];\n    }\n\n    this._listeners[type].forEach(function __emit(listener) {\n        listener.apply(this, args);\n    }, this);\n\n    return this;\n};\n\nmodule.exports.EventEmitter = EventEmitter;\n","\r\n/* \"minimal\" replacement for node's util.inspect()  */\r\n\r\nfunction inspect(obj, _opts) {\r\n  try {\r\n    return JSON.stringify(obj, dedupe(), 2);\r\n  } catch(_err){\r\n    return '' + obj;\r\n  }\r\n}\r\nexports.inspect = inspect;\r\n\r\n// adapted from https://careerkarma.com/blog/converting-circular-structure-to-json/\r\nfunction dedupe() {\r\n  const visited = createWeakSet();\r\n  return function(_key, value) {\r\n    if(typeof value === 'object' && value !== null) {\r\n      if(visited.has(value)) {\r\n        return '[Circular Reference]';\r\n      }\r\n      visited.add(value);\r\n    }\r\n    return value;\r\n  };\r\n};\r\n\r\n// try to create WeakSet(), fall back to Set()\r\nfunction createWeakSet() {\r\n  if(typeof WeakSet !== 'undefined'){\r\n    return new WeakSet();\r\n  }\r\n  return new Set();\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(497);\n"],"sourceRoot":""}